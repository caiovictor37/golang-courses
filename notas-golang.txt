1- Hello World
go build hello.go - Para buildar o código
go run hello.go - Para buildar e rodar o código

2- Variáveis
Se a variável não for inicializada, ela assume um valor padrão (inicialização zero, ou "zero initialization"):
string - ""
int - 0
float32 - 0.0
bool - false
struct - {}
Se a variável não for utilizada, o programa não compila nem inicializa por questões de clean code

2.1- Inferência de tipos
Declarações explícitas de variáveis
var name string = "Caio Baeta"
var age int = 31
var version float32 = 1.2

Inferência de variáveis
var name = "Caio Baeta"
var age = 31
var version = 1.2

Atribuição de variáveis curto
name := "Caio Baeta"
age := 31
version := 1.2

2.2- Leitura e escrita em terminal (pacote fmt)
	fmt.Println("1- Start monitoring")
	fmt.Println("2- Show logs")
	fmt.Println("0- Exit")
	var command int
	fmt.Scanf("%d", &command) // Scan da entrada sem inferência
	fmt.Scan(&command) // Scan da entrada com inferência
	fmt.Println("You chose option", command)
	
OBS: O Go não aceita colocar uma coisa inválida (ex: "a" na variável int)

3- Condicionais e Funções
3.1- if / else if / else (sempre aceita expressões booleanas)
	if command == 1 {
		fmt.Println("Start monitoring")
	} else if command == 2 {
		fmt.Println("Show logs")
	} else if command == 0 {
		fmt.Println("Exit")
	} else {
		fmt.Println("Invalid option")
	}
	
3.2 switch case
	switch command {
	case 1:
		fmt.Println("Start monitoring")
	case 2:
		fmt.Println("Show logs")
	case 0:
		fmt.Println("Exit")
	default:
		fmt.Println("Invalid option")
	}

OBS: Go não precisa de break no final de cada switch case, pois só executa o trecho de código dentro da condicional tratada

3.3- Funções
Funções void (sem retorno)
func showOptions() {
	fmt.Println("1- Start monitoring")
	fmt.Println("2- Show logs")
	fmt.Println("0- Exit")
}

Funções retornando um tipo (ex: inteiro)
func chooseOption() int {
	var option int
	// fmt.Scanf("%d", &command)
	fmt.Scan(&option)
	fmt.Println("You chose option", option)
	return option
}

Funções com múltiplos retornos
func nameAndSurname() (string, string) {
	var name string
	var surname string
	fmt.Scanf("%s", &name)
	fmt.Scanf("%s", &surname)
	return name, surname
}

Funções variáticas com múltiplas entradas
func sum(numbers ...int) int {
    sumResult := 0
    for _, number := range numbers {
        sumResult += number
    }
    return sumResult
}

OBS: para ignorar uma das variáveis no uso da função, usar _. Exemplo:
name, surname := nameAndSurname()
_, surname := nameAndSurname() // Ignorando nome
name, _ := nameAndSurname() // Ignorando sobrenome

4- Requisições WEB (Pacote net/http)
func startMonitoring() {
	url := "https://www.alura.com.br"
	resp, err := http.Get(url) // Resposta e Erro
	// fmt.Println(resp)
	if err == nil {
		if resp.StatusCode == 200 {
			fmt.Println("Successful", resp.StatusCode)
		} else {
			fmt.Println("HTTP Status Error", resp.StatusCode)
		}
	} else {
		fmt.Println("Error", err)
	}
}

4.1 Laços
for { // Loop infinito
}

for i:=0;i<len(sitesSlice);i++ { // Loop tradicional por iteração de índice
	fmt.Println(sitesSlice[i])
}

for i, site := range sitesArray { // Loop by range, retorna o índice iterado e/ou o elemento iterado. Usar _ para ignorar um ou o outro
	fmt.Println(site)
}

5 Collections
5.1 Arrays
var sitesArray [4]string - Precisa informar o tamanho do array, pois tem tamanho fixo
sitesArray[0] = "https://random-status-code.herokuapp.com"
sitesArray[1] = "https://www.alura.com.br"
sitesArray[2] = "https://www.caelum.com.br"
	
5.2 Slices
sitesSlice := []string{"https://random-status-code.herokuapp.com", - Slices tem tamanho variável e trabalham com Arrays debaixo dos panos
		"https://www.alura.com.br",
		"https://www.caelum.com.br"}
		
		
sitesSlice = append(sitesSlice, "https://www.google.com.br") - Adiciona um item no slice
len(sitesSlice) - Tamanho do slice
cap(sitesSlice) - Capacidade do slice (dobra quando passa do limite inicial)

6 Structs
	type Account struct {
		name          string
		agencyNumber  int
		accountNumber int
		balance       float64
	}
	
	type Account struct {
		Customer                    customers.Customer
		AgencyNumber, AccountNumber	int // outra forma de declaração de tipos
		balance                     float64
	}

6.1 Modos de iniciar a struct:
	account1 := Account{
		name:          "Caio Baeta",
		agencyNumber:  1234,
		accountNumber: 5678,
		balance:       1000.00,
	}
	account2 := Account{
		"Caio Baeta",
		1234,
		5678,
		1000.00,
	}
	fmt.Println(account1 == account2) // true, pois compara valores

7 Pointers
	// New objects with pointers
	var account3 *Account
	account3 = new(Account)
	// account3 := new(Account) // Declaração direta de ponteiro (2 linhas acima)
	account3.name = "Caio Baeta"
	account3.agencyNumber = 1234
	account3.accountNumber = 5678
	account3.balance = 1000.00

	var account4 *Account
	account4 = new(Account)
	// account4 := new(Account) // Declaração direta de ponteiro (2 linhas acima)
	account4.name = "Caio Baeta"
	account4.agencyNumber = 1234
	account4.accountNumber = 5678
	account4.balance = 1000.00
	fmt.Println(account3)  // Pointer
	fmt.Println(account4)  // Pointer
	fmt.Println(*account3) // Value of pointer
	fmt.Println(*account4) // Value of pointer
	fmt.Println(&account3) // Address of pointer
	fmt.Println(&account4) // Address of pointer
	fmt.Println(account3 == account4) // false
	fmt.Println(&account3 == &account4) // false
	fmt.Println(*account3 == *account4) // true
	
7.1 Struct function with pointer
	func (c *Account) Withdraw(value float64) string {
		if value > 0 && value > c.balance {
			return "Can't withdraw this value"
		}
		c.balance -= value
		return fmt.Sprintf("Withdrawal of $%.2f successful", value)
	}

	func main() {
		account := new(Account)
		account.name = "Caio Baeta"
		account.agencyNumber = 1234
		account.accountNumber = 5678
		account.balance = 1000.00

		fmt.Println(account)
		fmt.Println(account.Withdraw(800))
		fmt.Println(account)
		fmt.Println(account.Withdraw(800))
		fmt.Println(account)
	}
	
8 Packages and Visibility
// Para importar um pacote: colocar todo o caminho depois do src/..., ou seja, os ...
package main

import (
	"fmt"
	"golang-courses/alura/2-object-oriented-go/bank/accounts" // Exemplo de import, a partir do folder depois de src/
)

func main() {
	account := new(accounts.Account)
	account.name = "Caio Baeta"
	account.agencyNumber = 1234
	account.accountNumber = 5678
	account.balance = 1000.00

	fmt.Println(account)
	fmt.Println(account.Withdraw(800))
	fmt.Println(account)
	fmt.Println(account.Withdraw(800))
	fmt.Println(account)
	fmt.Println(account.Deposit(800))
	fmt.Println(account)
	fmt.Println(account.Deposit(-800))
	fmt.Println(account)

	account2 := new(accounts.Account)
	account2.name = "Test User"
	account2.agencyNumber = 4321
	account2.accountNumber = 8765
	account2.balance = 1000.00

	fmt.Println(account.transferToAccount(account2, 500))
	fmt.Println(account)
	fmt.Println(account2)
	fmt.Println(account2.transferToAccount(account, 200))
	fmt.Println(account)
	fmt.Println(account2)
	fmt.Println(account2.transferToAccount(account, -200))
	fmt.Println(account)
	fmt.Println(account2)
	fmt.Println(account2.transferToAccount(account, 20000))
	fmt.Println(account)
	fmt.Println(account2)
}

// O arquivo está em um package que é o folder, então Account foi colocado no pacote accounts
package accounts

import "fmt"

// Se as variáveis iniciarem com minúsculo, são private. Com maiúsculo, se tornam públicas
type Account struct {
	Name          string  // Pública
	AgencyNumber  int	  // Pública
	AccountNumber int	  // Pública
	balance       float64 // Privada
}

func (c *Account) Withdraw(value float64) string {
	if value < 0 || value > c.balance {
		return "Can't withdraw this value"
	}
	c.balance -= value
	return fmt.Sprintf("Withdrawal of $%.2f successful", value)
}

func (c *Account) Deposit(value float64) string {
	if value < 0 {
		return "Can't deposit this value"
	}
	c.balance += value
	return fmt.Sprintf("Deposit of $%.2f successful", value)
}

// O mesmo vale para funções: iniciou com minúsculo, função privada. Maiúsculo, função pública
func (c *Account) transferToAccount(account *Account, value float64) string {
	if value < 0 || value > c.balance {
		return "Can't transfer this value"
	}
	account.balance += value
	c.balance -= value
	return fmt.Sprintf("Transfer of $%.2f from "+c.name+" to "+account.name+" successful", value)
}
