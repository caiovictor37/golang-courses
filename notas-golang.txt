1- Hello World
go build hello.go - Para buildar o código
go run hello.go - Para buildar e rodar o código

2- Variáveis
Se a variável não for inicializada:
string - ""
int - 0
float32 - 0.0
Se a variável não for utilizada, o programa não compila nem inicializa por questões de clean code

2.1- Inferência de tipos
Declarações explícitas de variáveis
var name string = "Caio Baeta"
var age int = 31
var version float32 = 1.2

Inferência de variáveis
var name = "Caio Baeta"
var age = 31
var version = 1.2

Atribuição de variáveis curto
name := "Caio Baeta"
age := 31
version := 1.2

2.2- Leitura e escrita em terminal (pacote fmt)
	fmt.Println("1- Start monitoring")
	fmt.Println("2- Show logs")
	fmt.Println("0- Exit")
	var command int
	fmt.Scanf("%d", &command) // Scan da entrada sem inferência
	fmt.Scan(&command) // Scan da entrada com inferência
	fmt.Println("You chose option", command)
	
OBS: O Go não aceita colocar uma coisa inválida (ex: "a" na variável int)

3- Condicionais e Funções
3.1- if / else if / else (sempre aceita expressões booleanas)
	if command == 1 {
		fmt.Println("Start monitoring")
	} else if command == 2 {
		fmt.Println("Show logs")
	} else if command == 0 {
		fmt.Println("Exit")
	} else {
		fmt.Println("Invalid option")
	}
	
3.2 switch case
	switch command {
	case 1:
		fmt.Println("Start monitoring")
	case 2:
		fmt.Println("Show logs")
	case 0:
		fmt.Println("Exit")
	default:
		fmt.Println("Invalid option")
	}

OBS: Go não precisa de break no final de cada switch case, pois só executa o trecho de código dentro da condicional tratada

3.3- Funções
Funções void (sem retorno)
func showOptions() {
	fmt.Println("1- Start monitoring")
	fmt.Println("2- Show logs")
	fmt.Println("0- Exit")
}

Funções retornando um tipo (ex: inteiro)
func chooseOption() int {
	var option int
	// fmt.Scanf("%d", &command)
	fmt.Scan(&option)
	fmt.Println("You chose option", option)
	return option
}
